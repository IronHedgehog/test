{"version":3,"sources":["index.js"],"names":["BASE_URL","reqServer","url","method","data","options","headers","fetch","body","JSON","stringify","then","res","json","refs","listNode","document","querySelector","form","renderPostList","markUp","map","post","id","title","text","author","join","innerHTML","editPost","e","target","nodeName","closest","dataset","elements","value","addEventListener","code","shiftKey","reset","updateForm","console","log"],"mappings":";;;AAgHA,aAhHA,QAAA,wBAEA,MAAMA,EAAW,wBAEjB,SAASC,EAAUC,EAAKC,EAAS,MAAOC,EAAO,IACvCC,MAAAA,EAAU,CACdF,OAAAA,EACAG,QAAS,CACS,eAAA,oCAQbC,MAJQ,QAAXJ,GAA+B,WAAXA,IACtBE,EAAQG,KAAOC,KAAKC,UAAUN,IAGzBG,MAAMP,EAAWE,EAAKG,GAASM,KAAKC,GAAOA,EAAIC,QAKxD,MAAMC,EAAO,CACXC,SAAUC,SAASC,cAAc,cACjCC,KAAMF,SAASC,cAAc,iBAG/B,SAASE,IACPlB,EAAU,UAAUU,KAAKC,IACjBQ,MAAAA,EAASR,EACZS,IACCC,mBACkBA,EAAKC,qBACjBD,EAAKE,4BACJF,EAAKG,mDACmBH,EAAKI,2CAIrCC,KAAK,IACRb,EAAKC,SAASa,UAAYR,IAsB9B,SAASS,EAASC,GACZA,GAAsB,WAAtBA,EAAEC,OAAOC,SAAuB,OAEpC/B,EAAU,UADC6B,EAAEC,OAAOE,QAAQ,MAAMC,QAAQX,IAChBZ,KAAKP,IAC7BU,EAAKI,KAAKiB,SAASV,KAAKW,MAAQhC,EAAKqB,KACrCX,EAAKI,KAAKiB,SAAST,OAAOU,MAAQhC,EAAKsB,OACvCZ,EAAKI,KAAKiB,SAASX,MAAMY,MAAQhC,EAAKoB,MACtCV,EAAKI,KAAKiB,SAASZ,GAAGa,MAAQhC,EAAKmB,KAzBvCJ,IAEAL,EAAKI,KAAKmB,iBAAiB,UAAWP,IAChCA,GAAW,UAAXA,EAAEQ,MAAoBR,EAAES,SAAU,CAMpCtC,EAAU,SAAU,OALP,CACXwB,KAAMX,EAAKI,KAAKiB,SAASV,KAAKW,MAC9BV,OAAQZ,EAAKI,KAAKiB,SAAST,OAAOU,MAClCZ,MAAOV,EAAKI,KAAKiB,SAASX,MAAMY,QAEAzB,KAAKP,IACrCU,EAAKI,KAAKsB,QACVrB,SAKNL,EAAKC,SAASsB,iBAAiB,QAASR,GAaxCf,EAAKI,KAAKmB,iBAAiB,UAAWP,IAChCA,GAAU,SAAVA,EAAEQ,MAAmBR,EAAES,SAAU,CAC7BnC,MAAAA,EAAO,CACXqB,KAAMX,EAAKI,KAAKiB,SAASV,KAAKW,MAC9BV,OAAQZ,EAAKI,KAAKiB,SAAST,OAAOU,MAClCZ,MAAOV,EAAKI,KAAKiB,SAASX,MAAMY,OAG5BK,EAAarC,IACjBU,EAAKI,KAAKsB,QACV1B,EAAKI,KAAKiB,SAASZ,GAAGa,MAAQ,GAC9BjB,KAGFuB,QAAQC,IAAIvC,GAENmB,MAAAA,EAAKT,EAAKI,KAAKiB,SAASZ,GAAGa,MACtB,KAAPb,EACFtB,EAAU,SAAU,OAAQG,GAAMO,KAAK8B,GAEvCxC,YAAoBsB,IAAM,QAASnB,GAAMO,KAAK8B","file":"src.611e7ff1.js","sourceRoot":"../src","sourcesContent":["import './styles/styles.scss';\n\nconst BASE_URL = 'http://localhost:3000';\n\nfunction reqServer(url, method = 'GET', data = {}) {\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  };\n\n  if (method !== 'GET' && method !== 'delete') {\n    options.body = JSON.stringify(data);\n  }\n\n  return fetch(BASE_URL + url, options).then(res => res.json());\n}\n\n// reqServer('/posts').then(console.log);\n\nconst refs = {\n  listNode: document.querySelector('.post-list'),\n  form: document.querySelector('#create-post'),\n};\n\nfunction renderPostList() {\n  reqServer('/posts').then(res => {\n    const markUp = res\n      .map(\n        post =>\n          `<li data-id=\"${post.id}\">\n        <h3>${post.title}</h3>\n         <p> ${post.text} </p>\n        <small><button>edit</button> ${post.author}</small>\n        </li>\n        `,\n      )\n      .join('');\n    refs.listNode.innerHTML = markUp;\n  });\n}\n\nrenderPostList();\n\nrefs.form.addEventListener('keydown', e => {\n  if (e.code === 'Enter' && e.shiftKey) {\n    const data = {\n      text: refs.form.elements.text.value,\n      author: refs.form.elements.author.value,\n      title: refs.form.elements.title.value,\n    };\n    reqServer('/posts', 'POST', data).then(data => {\n      refs.form.reset();\n      renderPostList();\n    });\n  }\n});\n\nrefs.listNode.addEventListener('click', editPost);\n\nfunction editPost(e) {\n  if (e.target.nodeName !== 'BUTTON') return;\n  const ID = e.target.closest('li').dataset.id;\n  reqServer('/posts/' + ID).then(data => {\n    refs.form.elements.text.value = data.text;\n    refs.form.elements.author.value = data.author;\n    refs.form.elements.title.value = data.title;\n    refs.form.elements.id.value = data.id;\n  });\n}\n\nrefs.form.addEventListener('keydown', e => {\n  if (e.code == 'Enter' && e.shiftKey) {\n    const data = {\n      text: refs.form.elements.text.value,\n      author: refs.form.elements.author.value,\n      title: refs.form.elements.title.value,\n    };\n\n    const updateForm = data => {\n      refs.form.reset();\n      refs.form.elements.id.value = '';\n      renderPostList();\n    };\n\n    console.log(data);\n\n    const id = refs.form.elements.id.value;\n    if (id === '') {\n      reqServer('/posts', 'POST', data).then(updateForm);\n    } else {\n      reqServer(`/posts/${id}`, 'PATCH', data).then(updateForm);\n    }\n  }\n});\n// function createPost(data) {\n//   const options = {\n//     method: 'POST',\n//     body: JSON.stringify(data),\n//     headers: {\n//       'Content-Type': 'application/json; charset=UTF-8',\n//     },\n//   };\n//   fetch(`${BASE_URL}/posts`, options);\n// }\n\n// function deletePost(PostId) {\n//   const options = {\n//     method: 'DELETE',\n//   };\n//   fetch(`${BASE_URL}/posts/${PostId}`, options);\n// }\n"]}